(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{346:function(e,n,a){"use strict";a.r(n);var t=a(33),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"表的记录操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表的记录操作"}},[e._v("#")]),e._v(" 表的记录操作")]),e._v(" "),a("p",[e._v("MySQL数据操作： DML")]),e._v(" "),a("p",[e._v("在MySQL管理软件中，可以通过SQL语句中的DML语言来实现数据的操作，包括")]),e._v(" "),a("p",[e._v("1.使用INSERT实现数据的插入\n2.UPDATE实现数据的更新\n3.使用DELETE实现数据的删除\n4.使用SELECT查询数据以及")]),e._v(" "),a("h2",{attrs:{id:"插入数据insert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入数据insert"}},[e._v("#")]),e._v(" 插入数据insert")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1. 插入完整数据（顺序插入）\n    语法一：\n    INSERT INTO 表名(字段1,字段2,字段3…字段n) VALUES(值1,值2,值3…值n);\n\n    语法二：\n    INSERT INTO 表名 VALUES (值1,值2,值3…值n);\n\n2. 指定字段插入数据\n    语法：\n    INSERT INTO 表名(字段1,字段2,字段3…) VALUES (值1,值2,值3…);\n\n3. 插入多条记录\n    语法：\n    INSERT INTO 表名 VALUES\n        (值1,值2,值3…值n),\n        (值1,值2,值3…值n),\n        (值1,值2,值3…值n);\n        \n4. 插入查询结果\n    语法：\n    INSERT INTO 表名(字段1,字段2,字段3…字段n) \n                    SELECT (字段1,字段2,字段3…字段n) FROM 表2\n                    WHERE …;\n")])])]),a("h2",{attrs:{id:"更新数据update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新数据update"}},[e._v("#")]),e._v(" 更新数据update")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("语法：\n    UPDATE 表名 SET\n        字段1=值1,\n        字段2=值2,\n        WHERE CONDITION;\n\n示例：\n    UPDATE mysql.user SET password=password(‘123’) \n        where user=’root’ and host=’localhost’;\n")])])]),a("h2",{attrs:{id:"删除数据delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除数据delete"}},[e._v("#")]),e._v(" 删除数据delete")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("语法：\n    DELETE FROM 表名 \n        WHERE CONITION;\n\n示例：\n    DELETE FROM mysql.user \n        WHERE password=’’;\n\n练习：\n    更新MySQL root用户密码为mysql123\n    删除除从本地登录的root用户以外的所有用户\n")])])]),a("h2",{attrs:{id:"查询数据-单表查询-select"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询数据-单表查询-select"}},[e._v("#")]),e._v(" 查询数据-单表查询 select")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("单表查询语法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SELECT DISTINCT 字段1,字段2... FROM 表名\n                              WHERE 条件\n                              GROUP BY field\n                              HAVING 筛选\n                              ORDER BY field\n                              LIMIT 限制条数\n")])])])]),e._v(" "),a("li",[a("p",[e._v("关键字优先级")]),e._v(" "),a("p",[a("code",[e._v("from, where, group by, select, distinct, having, order by, limit")])]),e._v(" "),a("p",[a("strong",[e._v("1.找到表:from")])]),e._v(" "),a("p",[a("strong",[e._v("2.拿着where指定的约束条件，去文件/表中取出一条条记录")])]),e._v(" "),a("p",[a("strong",[e._v("3.将取出的一条条记录进行分组group by，如果没有group by，则整体作为一组")])]),e._v(" "),a("p",[a("strong",[e._v("4.执行select（去重）")])]),e._v(" "),a("p",[a("strong",[e._v("5.将分组的结果进行having过滤")])]),e._v(" "),a("p",[a("strong",[e._v("6.将结果按条件排序：order by")])]),e._v(" "),a("p",[a("strong",[e._v("7.限制结果的显示条数")])])])]),e._v(" "),a("h3",{attrs:{id:"_1-简单查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单查询"}},[e._v("#")]),e._v(" 1.简单查询")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#简单查询\n    SELECT id,emp_name,sex,age,hire_date,post,post_comment,salary,office,depart_id\n    FROM employee;\n\n    SELECT * FROM employee;\n\n    SELECT emp_name,salary FROM employee;\n\n#避免重复DISTINCT\n    SELECT DISTINCT post FROM employee;    \n\n#通过四则运算查询\n    SELECT emp_name, salary*12 FROM employee;\n    SELECT emp_name, salary*12 AS Annual_salary FROM employee;\n    SELECT emp_name, salary*12 Annual_salary FROM employee;\n\n#定义显示格式\n   CONCAT() 函数用于连接字符串\n   SELECT CONCAT('姓名: ',emp_name,'  年薪: ', salary*12)  AS Annual_salary\n   FROM employee;\n   \n   CONCAT_WS() 第一个参数为分隔符\n   SELECT CONCAT_WS(':',emp_name,salary*12)  AS Annual_salary \n   FROM employee;\n\n   结合CASE语句：\n   SELECT\n       (\n           CASE\n           WHEN emp_name = 'jingliyang' THEN\n               emp_name\n           WHEN emp_name = 'alex' THEN\n               CONCAT(emp_name,'_BIGSB')\n           ELSE\n               concat(emp_name, 'SB')\n           END\n       ) as new_name\n   FROM\n       employee;\n\n")])])]),a("h3",{attrs:{id:"_2-where约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-where约束"}},[e._v("#")]),e._v(" 2.where约束")]),e._v(" "),a("p",[e._v("where字句中可以使用：")]),e._v(" "),a("ol",[a("li",[e._v("比较运算符：> < >= <= <> !=")]),e._v(" "),a("li",[e._v("between 80 and 100 值在80到100之间")]),e._v(" "),a("li",[e._v("in(80,90,100) 值是80或90或100")]),e._v(" "),a("li",[e._v("like 'e%'\n通配符可以是%或_，\n    %表示任意多字符\n    _表示一个字符")]),e._v(" "),a("li",[e._v("逻辑运算符：在多个条件直接可以使用逻辑运算符 and or not")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#1:单条件查询\n    SELECT emp_name FROM employee\n        WHERE post='sale';\n        \n#2:多条件查询\n    SELECT emp_name,salary FROM employee\n        WHERE post='teacher' AND salary>10000;\n\n#3:关键字BETWEEN AND\n    SELECT emp_name,salary FROM employee\n        WHERE salary BETWEEN 10000 AND 20000;\n\n    SELECT emp_name,salary FROM employee \n        WHERE salary NOT BETWEEN 10000 AND 20000;\n    \n#4:关键字IS NULL(判断某个字段是否为NULL不能用等号，需要用IS)\n    SELECT emp_name,post_comment FROM employee \n        WHERE post_comment IS NULL;\n\n    SELECT emp_name,post_comment FROM employee \n        WHERE post_comment IS NOT NULL;\n        \n    SELECT emp_name,post_comment FROM employee \n        WHERE post_comment=''; 注意''是空字符串，不是null\n    ps：\n        执行\n        update employee set post_comment='' where id=2;\n        再用上条查看，就会有结果了\n\n#5:关键字IN集合查询\n    SELECT emp_name,salary FROM employee \n        WHERE salary=3000 OR salary=3500 OR salary=4000 OR salary=9000;\n    \n    SELECT emp_name,salary FROM employee \n        WHERE salary IN (3000,3500,4000,9000) ;\n\n    SELECT emp_name,salary FROM employee \n        WHERE salary NOT IN (3000,3500,4000,9000) ;\n\n#6:关键字LIKE模糊查询\n    通配符’%’\n    SELECT * FROM employee \n            WHERE emp_name LIKE 'eg%';\n\n    通配符’_’\n    SELECT * FROM employee \n            WHERE emp_name LIKE 'al__';\n")])])]),a("h3",{attrs:{id:"_3-group-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-group-by"}},[e._v("#")]),e._v(" 3.group by")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("单独使用GROUP BY关键字分组\n    SELECT post FROM employee GROUP BY post;\n    注意：我们按照post字段分组，那么select查询的字段只能是post，想要获取组内的其他相关信息，需要借助函数\n\nGROUP BY关键字和GROUP_CONCAT()函数一起使用\n    SELECT post,GROUP_CONCAT(emp_name) FROM employee GROUP BY post;#按照岗位分组，并查看组内成员名\n    SELECT post,GROUP_CONCAT(emp_name) as emp_members FROM employee GROUP BY post;\n\nGROUP BY与聚合函数一起使用\n    select post,count(id) as count from employee group by post;#按照岗位分组，并查看每个组有多少人\n")])])]),a("p",[a("strong",[e._v("如果我们用unique的字段作为分组的依据，则每一条记录自成一组，这种分组没有意义.多条记录之间的某个字段值相同，该字段通常用来作为分组的依据")])]),e._v(" "),a("h3",{attrs:{id:"_4-聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-聚合函数"}},[e._v("#")]),e._v(" 4.聚合函数")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#强调：聚合函数聚合的是组的内容，若是没有分组，则默认一组\n\n示例：\n    SELECT COUNT(*) FROM employee;\n    SELECT COUNT(*) FROM employee WHERE depart_id=1;\n    SELECT MAX(salary) FROM employee;\n    SELECT MIN(salary) FROM employee;\n    SELECT AVG(salary) FROM employee;\n    SELECT SUM(salary) FROM employee;\n    SELECT SUM(salary) FROM employee WHERE depart_id=3;\n")])])]),a("h3",{attrs:{id:"_5-having过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-having过滤"}},[e._v("#")]),e._v(" 5.having过滤")]),e._v(" "),a("p",[a("strong",[e._v("HAVING与WHERE不一样的地方在于!!!!!!")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#！！！执行优先级从高到低：where > group by > having \n#1. Where 发生在分组group by之前，因而Where中可以有任意字段，但是绝对不能使用聚合函数。\n#2. Having发生在分组group by之后，因而Having中可以使用分组的字段，无法直接取到其他字段,可以使用聚合函数\n")])])]),a("h3",{attrs:{id:"_6-order-by查询排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-order-by查询排序"}},[e._v("#")]),e._v(" 6.order by查询排序")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("按单列排序\n    SELECT * FROM employee ORDER BY salary;      //升序\n    SELECT * FROM employee ORDER BY salary ASC;  //升序\n    SELECT * FROM employee ORDER BY salary DESC; //降序\n\n按多列排序:先按照age排序，如果年纪相同，则按照薪资排序\n    SELECT * from employee\n        ORDER BY age,\n        salary DESC;\n")])])]),a("h3",{attrs:{id:"_7-limit-限制查询的记录数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-limit-限制查询的记录数"}},[e._v("#")]),e._v(" 7.limit 限制查询的记录数")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("示例：\n    SELECT * FROM employee ORDER BY salary DESC \n        LIMIT 3;                    #默认初始位置为0 \n    \n    SELECT * FROM employee ORDER BY salary DESC\n        LIMIT 0,5; #从第0开始，即先查询出第一条，然后包含这一条在内往后查5条\n\n    SELECT * FROM employee ORDER BY salary DESC\n        LIMIT 5,5; #从第5开始，即先查询出第6条，然后包含这一条在内往后查5条\n")])])]),a("h3",{attrs:{id:"_8-使用正则表达式查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-使用正则表达式查询"}},[e._v("#")]),e._v(" 8.使用正则表达式查询")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SELECT * FROM employee WHERE emp_name REGEXP '^ale';\n\nSELECT * FROM employee WHERE emp_name REGEXP 'on$';\n\nSELECT * FROM employee WHERE emp_name REGEXP 'm{2}';\n\n小结：对字符串匹配的方式\nWHERE emp_name = 'egon';\nWHERE emp_name LIKE 'yua%';\nWHERE emp_name REGEXP 'on$';\n")])])]),a("h2",{attrs:{id:"查询数据-多表查询-select"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询数据-多表查询-select"}},[e._v("#")]),e._v(" 查询数据-多表查询 select")]),e._v(" "),a("p",[e._v("建表与数据准备")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#建表\ncreate table department(\nid int,\nname varchar(20) \n);\n\ncreate table employee(\nid int primary key auto_increment,\nname varchar(20),\nsex enum('male','female') not null default 'male',\nage int,\ndep_id int\n);\n\n#插入数据\ninsert into department values\n(200,'技术'),\n(201,'人力资源'),\n(202,'销售'),\n(203,'运营');\n\ninsert into employee(name,sex,age,dep_id) values\n('egon','male',18,200),\n('alex','female',48,201),\n('wupeiqi','male',38,201),\n('yuanhao','female',28,202),\n('liwenzhou','male',18,200),\n('jingliyang','female',18,204)\n;\n")])])]),a("h3",{attrs:{id:"_1-多表连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-多表连接查询"}},[e._v("#")]),e._v(" 1.多表连接查询")]),e._v(" "),a("p",[a("strong",[e._v("1 交叉连接：不适用任何匹配条件。生成笛卡尔积")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mysql> select * from employee,department;\n")])])]),a("p",[a("strong",[e._v("2 内连接：只连接匹配的行")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#找两张表共有的部分，相当于利用条件从笛卡尔积结果中筛选出了正确的结果\n#department没有204这个部门，因而employee表中关于204这条员工信息没有匹配出来\nmysql> select employee.id,employee.name,employee.age,employee.sex,department.name from employee inner join department on employee.dep_id=department.id; \n+----+-----------+------+--------+--------------+\n| id | name      | age  | sex    | name         |\n+----+-----------+------+--------+--------------+\n|  1 | egon      |   18 | male   | 技术         |\n|  2 | alex      |   48 | female | 人力资源     |\n|  3 | wupeiqi   |   38 | male   | 人力资源     |\n|  4 | yuanhao   |   28 | female | 销售         |\n|  5 | liwenzhou |   18 | male   | 技术         |\n+----+-----------+------+--------+--------------+\n\n#上述sql等同于\nmysql> select employee.id,employee.name,employee.age,employee.sex,department.name from employee,department where employee.dep_id=department.id;\n")])])]),a("p",[a("strong",[e._v("3 外链接之左连接：优先显示左表全部记录")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#以右表为准，即找出所有部门信息，包括没有员工的部门\n#本质就是：在内连接的基础上增加右边有左边没有的结果\nmysql> select employee.id,employee.name,department.name as depart_name from employee right join department on employee.dep_id=department.id;\n+------+-----------+--------------+\n| id   | name      | depart_name  |\n+------+-----------+--------------+\n|    1 | egon      | 技术         |\n|    2 | alex      | 人力资源     |\n|    3 | wupeiqi   | 人力资源     |\n|    4 | yuanhao   | 销售         |\n|    5 | liwenzhou | 技术         |\n| NULL | NULL      | 运营         |\n+------+-----------+--------------+\n")])])]),a("p",[a("strong",[e._v("4 外链接之右连接：优先显示右表全部记录")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#以右表为准，即找出所有部门信息，包括没有员工的部门\n#本质就是：在内连接的基础上增加右边有左边没有的结果\nmysql> select employee.id,employee.name,department.name as depart_name from employee right join department on employee.dep_id=department.id;\n+------+-----------+--------------+\n| id   | name      | depart_name  |\n+------+-----------+--------------+\n|    1 | egon      | 技术         |\n|    2 | alex      | 人力资源     |\n|    3 | wupeiqi   | 人力资源     |\n|    4 | yuanhao   | 销售         |\n|    5 | liwenzhou | 技术         |\n| NULL | NULL      | 运营         |\n+------+-----------+--------------+\n")])])]),a("p",[a("strong",[e._v("5 全外连接：显示左右两个表全部记录")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("全外连接：在内连接的基础上增加左边有右边没有的和右边有左边没有的结果\n#注意：mysql不支持全外连接 full JOIN\n#强调：mysql可以使用此种方式间接实现全外连接\nselect * from employee left join department on employee.dep_id = department.id\nunion\nselect * from employee right join department on employee.dep_id = department.id\n;\n#查看结果\n+------+------------+--------+------+--------+------+--------------+\n| id   | name       | sex    | age  | dep_id | id   | name         |\n+------+------------+--------+------+--------+------+--------------+\n|    1 | egon       | male   |   18 |    200 |  200 | 技术         |\n|    5 | liwenzhou  | male   |   18 |    200 |  200 | 技术         |\n|    2 | alex       | female |   48 |    201 |  201 | 人力资源     |\n|    3 | wupeiqi    | male   |   38 |    201 |  201 | 人力资源     |\n|    4 | yuanhao    | female |   28 |    202 |  202 | 销售         |\n|    6 | jingliyang | female |   18 |    204 | NULL | NULL        |\n| NULL | NULL       | NULL   | NULL |   NULL |  203 | 运营         |\n+------+------------+--------+------+--------+------+--------------+\n\n#注意 union与union all的区别：union会去掉相同的纪录\n")])])]),a("h3",{attrs:{id:"_2-子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-子查询"}},[e._v("#")]),e._v(" 2.子查询")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#1：子查询是将一个查询语句嵌套在另一个查询语句中。\n#2：内层查询语句的查询结果，可以为外层查询语句提供查询条件。\n#3：子查询中可以包含：IN、NOT IN、ANY、ALL、EXISTS 和 NOT EXISTS等关键字\n#4：还可以包含比较运算符：= 、 !=、> 、<等\n")])])]),a("p",[a("strong",[e._v("1 带IN关键字的子查询")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#查询平均年龄在25岁以上的部门名\nselect id,name from department\n    where id in \n        (select dep_id from employee group by dep_id having avg(age) > 25);\n\n#查看技术部员工姓名\nselect name from employee\n    where dep_id in \n        (select id from department where name='技术');\n\n#查看不足1人的部门名(子查询得到的是有人的部门id)\nselect name from department where id not in (select distinct dep_id from employee);\n")])])]),a("p",[a("strong",[e._v("2 带比较运算符的子查询")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#比较运算符：=、!=、>、>=、<、<=、<>\n#查询大于所有人平均年龄的员工名与年龄\nmysql> select name,age from emp where age > (select avg(age) from emp);\n+---------+------+\n| name    | age  |\n+---------+------+\n| alex    | 48   |\n| wupeiqi | 38   |\n+---------+------+\n2 rows in set (0.00 sec)\n\n\n#查询大于部门内平均年龄的员工名、年龄\nselect t1.name,t1.age from emp t1\ninner join \n(select dep_id,avg(age) avg_age from emp group by dep_id) t2\non t1.dep_id = t2.dep_id\nwhere t1.age > t2.avg_age; \n")])])]),a("p",[a("strong",[e._v("3 带EXISTS关键字的子查询")])]),e._v(" "),a("p",[e._v("EXISTS关字键字表示存在。在使用EXISTS关键字时，内层查询语句不返回查询的记录。\n而是返回一个真假值。True或False\n当返回True时，外层查询语句将进行查询；当返回值为False时，外层查询语句不进行查询")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#department表中存在dept_id=203，Ture\nmysql> select * from employee\n    ->     where exists\n    ->         (select id from department where id=200);\n+----+------------+--------+------+--------+\n| id | name       | sex    | age  | dep_id |\n+----+------------+--------+------+--------+\n|  1 | egon       | male   |   18 |    200 |\n|  2 | alex       | female |   48 |    201 |\n|  3 | wupeiqi    | male   |   38 |    201 |\n|  4 | yuanhao    | female |   28 |    202 |\n|  5 | liwenzhou  | male   |   18 |    200 |\n|  6 | jingliyang | female |   18 |    204 |\n+----+------------+--------+------+--------+\n\n#department表中存在dept_id=205，False\nmysql> select * from employee\n    ->     where exists\n    ->         (select id from department where id=204);\nEmpty set (0.00 sec)\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);